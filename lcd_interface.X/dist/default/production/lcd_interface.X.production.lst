

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Jun 18 17:32:29 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F876A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 22/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F876A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     008C                     	;# 
    91     008D                     	;# 
    92     008E                     	;# 
    93     0091                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0094                     	;# 
    97     0098                     	;# 
    98     0099                     	;# 
    99     009C                     	;# 
   100     009D                     	;# 
   101     009E                     	;# 
   102     009F                     	;# 
   103     010C                     	;# 
   104     010D                     	;# 
   105     010E                     	;# 
   106     010F                     	;# 
   107     018C                     	;# 
   108     018D                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     0006                     	;# 
   116     0007                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     008C                     	;# 
   147     008D                     	;# 
   148     008E                     	;# 
   149     0091                     	;# 
   150     0092                     	;# 
   151     0093                     	;# 
   152     0094                     	;# 
   153     0098                     	;# 
   154     0099                     	;# 
   155     009C                     	;# 
   156     009D                     	;# 
   157     009E                     	;# 
   158     009F                     	;# 
   159     010C                     	;# 
   160     010D                     	;# 
   161     010E                     	;# 
   162     010F                     	;# 
   163     018C                     	;# 
   164     018D                     	;# 
   165     0007                     _PORTC	set	7
   166     0039                     _RC1	set	57
   167     0038                     _RC0	set	56
   168     003A                     _RC2	set	58
   169     0087                     _TRISC	set	135
   170                           
   171                           	psect	strings
   172     0003                     __pstrings:
   173     0003                     stringtab:
   174     0003                     __stringtab:
   175     0003                     stringcode:	
   176                           ;	String table - string pointers are 1 byte each
   177                           
   178     0003                     stringdir:
   179     0003  3000               	movlw	high stringdir
   180     0004  008A               	movwf	10
   181     0005  0804               	movf	4,w
   182     0006  0A84               	incf	4,f
   183     0007  0782               	addwf	2,f
   184     0008                     __stringbase:
   185     0008  3400               	retlw	0
   186     0009                     __end_of__stringtab:
   187     0009                     STR_1:
   188     0009  3468               	retlw	104	;'h'
   189     000A  3465               	retlw	101	;'e'
   190     000B  346C               	retlw	108	;'l'
   191     000C  346C               	retlw	108	;'l'
   192     000D  346F               	retlw	111	;'o'
   193     000E  3420               	retlw	32	;' '
   194     000F  3477               	retlw	119	;'w'
   195     0010  346F               	retlw	111	;'o'
   196     0011  3472               	retlw	114	;'r'
   197     0012  346C               	retlw	108	;'l'
   198     0013  3464               	retlw	100	;'d'
   199     0014  3400               	retlw	0
   200                           
   201                           	psect	cinit
   202     07FC                     start_initialization:	
   203                           ; #config settings
   204                           
   205     07FC                     __initialization:
   206     07FC                     end_of_initialization:	
   207                           ;End of C runtime variable initialization code
   208                           
   209     07FC                     __end_of__initialization:
   210     07FC  0183               	clrf	3
   211     07FD  120A  118A  2F90   	ljmp	_main	;jump to C main() function
   212                           
   213                           	psect	cstackCOMMON
   214     0070                     __pcstackCOMMON:
   215     0070                     ?_lcd_enable_pulse:
   216     0070                     ??_lcd_enable_pulse:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     0070                     ?_lcd_send_nibble:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     0070                     ?_lcd_send_byte:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     0070                     ?_lcd_command:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0070                     ?_lcd_data:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ?_lcd_init:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_lcd_write_string:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_main:	
   238                           ; 1 bytes @ 0x0
   239                           
   240                           
   241                           ; 1 bytes @ 0x0
   242     0070                     	ds	2
   243     0072                     ??_lcd_send_nibble:
   244                           
   245                           ; 1 bytes @ 0x2
   246     0072                     	ds	1
   247     0073                     lcd_send_nibble@nibble:
   248                           
   249                           ; 1 bytes @ 0x3
   250     0073                     	ds	1
   251     0074                     ??_lcd_send_byte:
   252                           
   253                           ; 1 bytes @ 0x4
   254     0074                     	ds	1
   255     0075                     lcd_send_byte@data:
   256                           
   257                           ; 1 bytes @ 0x5
   258     0075                     	ds	1
   259     0076                     ??_lcd_command:
   260     0076                     ??_lcd_data:	
   261                           ; 1 bytes @ 0x6
   262                           
   263     0076                     lcd_command@command:	
   264                           ; 1 bytes @ 0x6
   265                           
   266     0076                     lcd_data@data:	
   267                           ; 1 bytes @ 0x6
   268                           
   269                           
   270                           ; 1 bytes @ 0x6
   271     0076                     	ds	1
   272     0077                     ??_lcd_init:
   273     0077                     ?_lcd_set_cursor:	
   274                           ; 1 bytes @ 0x7
   275                           
   276     0077                     ??_lcd_write_string:	
   277                           ; 1 bytes @ 0x7
   278                           
   279     0077                     lcd_set_cursor@col:	
   280                           ; 1 bytes @ 0x7
   281                           
   282                           
   283                           ; 1 bytes @ 0x7
   284     0077                     	ds	1
   285     0078                     ??_lcd_set_cursor:
   286     0078                     lcd_set_cursor@row:	
   287                           ; 1 bytes @ 0x8
   288                           
   289     0078                     lcd_write_string@str:	
   290                           ; 1 bytes @ 0x8
   291                           
   292                           
   293                           ; 1 bytes @ 0x8
   294     0078                     	ds	1
   295     0079                     lcd_set_cursor@address:
   296                           
   297                           ; 1 bytes @ 0x9
   298     0079                     	ds	1
   299     007A                     ??_main:
   300                           
   301                           	psect	maintext
   302     0790                     __pmaintext:	
   303                           ; 1 bytes @ 0xA
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 89 in file "lcd_interface.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   323 ;;      Params:         0       0       0       0       0
   324 ;;      Locals:         0       0       0       0       0
   325 ;;      Temps:          0       0       0       0       0
   326 ;;      Totals:         0       0       0       0       0
   327 ;;Total ram usage:        0 bytes
   328 ;; Hardware stack levels required when called: 5
   329 ;; This function calls:
   330 ;;		_lcd_init
   331 ;;		_lcd_set_cursor
   332 ;;		_lcd_write_string
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338     0790                     _main:	
   339                           ;psect for function _main
   340                           
   341     0790                     l667:	
   342                           ;incstack = 0
   343                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   344                           
   345                           
   346                           ;lcd_interface.c: 90:     TRISC = 0x00;
   347     0790  1683               	bsf	3,5	;RP0=1, select bank1
   348     0791  1303               	bcf	3,6	;RP1=0, select bank1
   349     0792  0187               	clrf	7	;volatile
   350                           
   351                           ;lcd_interface.c: 91:     PORTC = 0x00;
   352     0793  1283               	bcf	3,5	;RP0=0, select bank0
   353     0794  1303               	bcf	3,6	;RP1=0, select bank0
   354     0795  0187               	clrf	7	;volatile
   355     0796                     l669:
   356                           
   357                           ;lcd_interface.c: 93:     lcd_init();
   358     0796  120A  118A  27CB  120A  118A  	fcall	_lcd_init
   359     079B                     l671:
   360                           
   361                           ;lcd_interface.c: 95:     lcd_set_cursor(0, 0);
   362     079B  01F7               	clrf	lcd_set_cursor@col
   363     079C  3000               	movlw	0
   364     079D  120A  118A  2763  120A  118A  	fcall	_lcd_set_cursor
   365     07A2                     l673:
   366                           
   367                           ;lcd_interface.c: 96:     lcd_write_string("hello world");
   368     07A2  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   369     07A3  120A  118A  27AC  120A  118A  	fcall	_lcd_write_string
   370     07A8                     l46:	
   371                           ;lcd_interface.c: 98:     while (1) {
   372                           
   373     07A8                     l47:	
   374                           ;lcd_interface.c: 100:     }
   375                           
   376     07A8  2FA8               	goto	l46
   377     07A9  120A  118A  2800   	ljmp	start
   378     07AC                     __end_of_main:
   379                           
   380                           	psect	text1
   381     07AC                     __ptext1:	
   382 ;; *************** function _lcd_write_string *****************
   383 ;; Defined at:
   384 ;;		line 82 in file "lcd_interface.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  str             1    wreg     PTR unsigned char 
   387 ;;		 -> STR_1(12), 
   388 ;; Auto vars:     Size  Location     Type
   389 ;;  str             1    8[COMMON] PTR unsigned char 
   390 ;;		 -> STR_1(12), 
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   400 ;;      Params:         0       0       0       0       0
   401 ;;      Locals:         1       0       0       0       0
   402 ;;      Temps:          1       0       0       0       0
   403 ;;      Totals:         2       0       0       0       0
   404 ;;Total ram usage:        2 bytes
   405 ;; Hardware stack levels used: 1
   406 ;; Hardware stack levels required when called: 4
   407 ;; This function calls:
   408 ;;		_lcd_data
   409 ;; This function is called by:
   410 ;;		_main
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414     07AC                     _lcd_write_string:	
   415                           ;psect for function _lcd_write_string
   416                           
   417                           
   418                           ;incstack = 0
   419                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   420                           ;lcd_write_string@str stored from wreg
   421     07AC  00F8               	movwf	lcd_write_string@str
   422     07AD                     l659:
   423                           
   424                           ;lcd_interface.c: 83:     while (*str != '\0') {
   425     07AD  2FBE               	goto	l665
   426     07AE                     l661:
   427                           
   428                           ;lcd_interface.c: 84:         lcd_data(*str);
   429     07AE  0878               	movf	lcd_write_string@str,w
   430     07AF  0084               	movwf	4
   431     07B0  120A  118A  2003  120A  118A  	fcall	stringdir
   432     07B5  120A  118A  2737  120A  118A  	fcall	_lcd_data
   433     07BA                     l663:
   434                           
   435                           ;lcd_interface.c: 85:         str++;
   436     07BA  3001               	movlw	1
   437     07BB  00F7               	movwf	??_lcd_write_string
   438     07BC  0877               	movf	??_lcd_write_string,w
   439     07BD  07F8               	addwf	lcd_write_string@str,f
   440     07BE                     l665:
   441                           
   442                           ;lcd_interface.c: 83:     while (*str != '\0') {
   443     07BE  0878               	movf	lcd_write_string@str,w
   444     07BF  0084               	movwf	4
   445     07C0  120A  118A  2003  120A  118A  	fcall	stringdir
   446     07C5  3A00               	xorlw	0
   447     07C6  1D03               	skipz
   448     07C7  2FC9               	goto	u51
   449     07C8  2FCA               	goto	u50
   450     07C9                     u51:
   451     07C9  2FAE               	goto	l661
   452     07CA                     u50:
   453     07CA                     l41:
   454     07CA  0008               	return
   455     07CB                     __end_of_lcd_write_string:
   456                           
   457                           	psect	text2
   458     0737                     __ptext2:	
   459 ;; *************** function _lcd_data *****************
   460 ;; Defined at:
   461 ;;		line 54 in file "lcd_interface.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;  data            1    wreg     unsigned char 
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  data            1    6[COMMON] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0, pclath, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   475 ;;      Params:         0       0       0       0       0
   476 ;;      Locals:         1       0       0       0       0
   477 ;;      Temps:          0       0       0       0       0
   478 ;;      Totals:         1       0       0       0       0
   479 ;;Total ram usage:        1 bytes
   480 ;; Hardware stack levels used: 1
   481 ;; Hardware stack levels required when called: 3
   482 ;; This function calls:
   483 ;;		_lcd_send_byte
   484 ;; This function is called by:
   485 ;;		_lcd_write_string
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489     0737                     _lcd_data:	
   490                           ;psect for function _lcd_data
   491                           
   492                           
   493                           ;incstack = 0
   494                           ; Regs used in _lcd_data: [wreg+status,2+status,0+pclath+cstack]
   495                           ;lcd_data@data stored from wreg
   496     0737  00F6               	movwf	lcd_data@data
   497     0738                     l609:
   498                           
   499                           ;lcd_interface.c: 55:     RC0 = 1;
   500     0738  1283               	bcf	3,5	;RP0=0, select bank0
   501     0739  1303               	bcf	3,6	;RP1=0, select bank0
   502     073A  1407               	bsf	7,0	;volatile
   503                           
   504                           ;lcd_interface.c: 56:     RC1 = 0;
   505     073B  1087               	bcf	7,1	;volatile
   506     073C                     l611:
   507                           
   508                           ;lcd_interface.c: 57:     lcd_send_byte(data);
   509     073C  0876               	movf	lcd_data@data,w
   510     073D  120A  118A  2777  120A  118A  	fcall	_lcd_send_byte
   511     0742                     l27:
   512     0742  0008               	return
   513     0743                     __end_of_lcd_data:
   514                           
   515                           	psect	text3
   516     0763                     __ptext3:	
   517 ;; *************** function _lcd_set_cursor *****************
   518 ;; Defined at:
   519 ;;		line 70 in file "lcd_interface.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;  row             1    wreg     unsigned char 
   522 ;;  col             1    7[COMMON] unsigned char 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  row             1    8[COMMON] unsigned char 
   525 ;;  address         1    9[COMMON] unsigned char 
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, status,2, status,0, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   535 ;;      Params:         1       0       0       0       0
   536 ;;      Locals:         2       0       0       0       0
   537 ;;      Temps:          0       0       0       0       0
   538 ;;      Totals:         3       0       0       0       0
   539 ;;Total ram usage:        3 bytes
   540 ;; Hardware stack levels used: 1
   541 ;; Hardware stack levels required when called: 4
   542 ;; This function calls:
   543 ;;		_lcd_command
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549     0763                     _lcd_set_cursor:	
   550                           ;psect for function _lcd_set_cursor
   551                           
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _lcd_set_cursor: [wreg+status,2+status,0+pclath+cstack]
   555                           ;lcd_set_cursor@row stored from wreg
   556     0763  00F8               	movwf	lcd_set_cursor@row
   557     0764                     l651:
   558                           
   559                           ;lcd_interface.c: 71:     unsigned char address;;lcd_interface.c: 73:     if (row == 0) 
      +                          {
   560     0764  0878               	movf	lcd_set_cursor@row,w
   561     0765  1D03               	btfss	3,2
   562     0766  2F68               	goto	u41
   563     0767  2F69               	goto	u40
   564     0768                     u41:
   565     0768  2F6C               	goto	l655
   566     0769                     u40:
   567     0769                     l653:
   568                           
   569                           ;lcd_interface.c: 74:         address = col;
   570     0769  0877               	movf	lcd_set_cursor@col,w
   571     076A  00F9               	movwf	lcd_set_cursor@address
   572                           
   573                           ;lcd_interface.c: 75:     } else {
   574     076B  2F6F               	goto	l657
   575     076C                     l655:
   576                           
   577                           ;lcd_interface.c: 76:         address = 0x40 + col;
   578     076C  0877               	movf	lcd_set_cursor@col,w
   579     076D  3E40               	addlw	64
   580     076E  00F9               	movwf	lcd_set_cursor@address
   581     076F                     l657:
   582                           
   583                           ;lcd_interface.c: 79:     lcd_command(0x80 | address);
   584     076F  0879               	movf	lcd_set_cursor@address,w
   585     0770  3880               	iorlw	128
   586     0771  120A  118A  272B  120A  118A  	fcall	_lcd_command
   587     0776                     l35:
   588     0776  0008               	return
   589     0777                     __end_of_lcd_set_cursor:
   590                           
   591                           	psect	text4
   592     07CB                     __ptext4:	
   593 ;; *************** function _lcd_init *****************
   594 ;; Defined at:
   595 ;;		line 60 in file "lcd_interface.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;		None
   598 ;; Auto vars:     Size  Location     Type
   599 ;;		None
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, status,2, status,0, pclath, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   609 ;;      Params:         0       0       0       0       0
   610 ;;      Locals:         0       0       0       0       0
   611 ;;      Temps:          2       0       0       0       0
   612 ;;      Totals:         2       0       0       0       0
   613 ;;Total ram usage:        2 bytes
   614 ;; Hardware stack levels used: 1
   615 ;; Hardware stack levels required when called: 4
   616 ;; This function calls:
   617 ;;		_lcd_command
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623     07CB                     _lcd_init:	
   624                           ;psect for function _lcd_init
   625                           
   626     07CB                     l613:	
   627                           ;incstack = 0
   628                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   629                           
   630                           
   631                           ;lcd_interface.c: 61:     _delay((unsigned long)((15)*(4000000/4000.0)));
   632     07CB  3014               	movlw	20
   633     07CC  00F8               	movwf	??_lcd_init+1
   634     07CD  3079               	movlw	121
   635     07CE  00F7               	movwf	??_lcd_init
   636     07CF                     u67:
   637     07CF  0BF7               	decfsz	??_lcd_init,f
   638     07D0  2FCF               	goto	u67
   639     07D1  0BF8               	decfsz	??_lcd_init+1,f
   640     07D2  2FCF               	goto	u67
   641     07D3  2FD4               	nop2
   642     07D4                     l615:
   643                           
   644                           ;lcd_interface.c: 62:     lcd_command(0x02);
   645     07D4  3002               	movlw	2
   646     07D5  120A  118A  272B  120A  118A  	fcall	_lcd_command
   647     07DA                     l617:
   648                           
   649                           ;lcd_interface.c: 63:     lcd_command(0x28);
   650     07DA  3028               	movlw	40
   651     07DB  120A  118A  272B  120A  118A  	fcall	_lcd_command
   652     07E0                     l619:
   653                           
   654                           ;lcd_interface.c: 64:     lcd_command(0x0C);
   655     07E0  300C               	movlw	12
   656     07E1  120A  118A  272B  120A  118A  	fcall	_lcd_command
   657     07E6                     l621:
   658                           
   659                           ;lcd_interface.c: 65:     lcd_command(0x06);
   660     07E6  3006               	movlw	6
   661     07E7  120A  118A  272B  120A  118A  	fcall	_lcd_command
   662     07EC                     l623:
   663                           
   664                           ;lcd_interface.c: 66:     lcd_command(0x01);
   665     07EC  3001               	movlw	1
   666     07ED  120A  118A  272B  120A  118A  	fcall	_lcd_command
   667     07F2                     l625:
   668                           
   669                           ;lcd_interface.c: 67:     _delay((unsigned long)((3)*(4000000/4000.0)));
   670     07F2  3004               	movlw	4
   671     07F3  00F8               	movwf	??_lcd_init+1
   672     07F4  30E4               	movlw	228
   673     07F5  00F7               	movwf	??_lcd_init
   674     07F6                     u77:
   675     07F6  0BF7               	decfsz	??_lcd_init,f
   676     07F7  2FF6               	goto	u77
   677     07F8  0BF8               	decfsz	??_lcd_init+1,f
   678     07F9  2FF6               	goto	u77
   679     07FA  0000               	nop
   680     07FB                     l30:
   681     07FB  0008               	return
   682     07FC                     __end_of_lcd_init:
   683                           
   684                           	psect	text5
   685     072B                     __ptext5:	
   686 ;; *************** function _lcd_command *****************
   687 ;; Defined at:
   688 ;;		line 48 in file "lcd_interface.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  command         1    wreg     unsigned char 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  command         1    6[COMMON] unsigned char 
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, status,2, status,0, pclath, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   702 ;;      Params:         0       0       0       0       0
   703 ;;      Locals:         1       0       0       0       0
   704 ;;      Temps:          0       0       0       0       0
   705 ;;      Totals:         1       0       0       0       0
   706 ;;Total ram usage:        1 bytes
   707 ;; Hardware stack levels used: 1
   708 ;; Hardware stack levels required when called: 3
   709 ;; This function calls:
   710 ;;		_lcd_send_byte
   711 ;; This function is called by:
   712 ;;		_lcd_init
   713 ;;		_lcd_set_cursor
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717     072B                     _lcd_command:	
   718                           ;psect for function _lcd_command
   719                           
   720                           
   721                           ;incstack = 0
   722                           ; Regs used in _lcd_command: [wreg+status,2+status,0+pclath+cstack]
   723                           ;lcd_command@command stored from wreg
   724     072B  00F6               	movwf	lcd_command@command
   725     072C                     l605:
   726                           
   727                           ;lcd_interface.c: 49:     RC0 = 0;
   728     072C  1283               	bcf	3,5	;RP0=0, select bank0
   729     072D  1303               	bcf	3,6	;RP1=0, select bank0
   730     072E  1007               	bcf	7,0	;volatile
   731                           
   732                           ;lcd_interface.c: 50:     RC1 = 0;
   733     072F  1087               	bcf	7,1	;volatile
   734     0730                     l607:
   735                           
   736                           ;lcd_interface.c: 51:     lcd_send_byte(command);
   737     0730  0876               	movf	lcd_command@command,w
   738     0731  120A  118A  2777  120A  118A  	fcall	_lcd_send_byte
   739     0736                     l24:
   740     0736  0008               	return
   741     0737                     __end_of_lcd_command:
   742                           
   743                           	psect	text6
   744     0777                     __ptext6:	
   745 ;; *************** function _lcd_send_byte *****************
   746 ;; Defined at:
   747 ;;		line 43 in file "lcd_interface.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  data            1    wreg     unsigned char 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  data            1    5[COMMON] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0, pclath, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         0       0       0       0       0
   762 ;;      Locals:         1       0       0       0       0
   763 ;;      Temps:          1       0       0       0       0
   764 ;;      Totals:         2       0       0       0       0
   765 ;;Total ram usage:        2 bytes
   766 ;; Hardware stack levels used: 1
   767 ;; Hardware stack levels required when called: 2
   768 ;; This function calls:
   769 ;;		_lcd_send_nibble
   770 ;; This function is called by:
   771 ;;		_lcd_command
   772 ;;		_lcd_data
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776     0777                     _lcd_send_byte:	
   777                           ;psect for function _lcd_send_byte
   778                           
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _lcd_send_byte: [wreg+status,2+status,0+pclath+cstack]
   782                           ;lcd_send_byte@data stored from wreg
   783     0777  00F5               	movwf	lcd_send_byte@data
   784     0778                     l603:
   785                           
   786                           ;lcd_interface.c: 44:     lcd_send_nibble(data & 0xF0);
   787     0778  0875               	movf	lcd_send_byte@data,w
   788     0779  39F0               	andlw	240
   789     077A  120A  118A  2753  120A  118A  	fcall	_lcd_send_nibble
   790                           
   791                           ;lcd_interface.c: 45:     lcd_send_nibble((data << 4) & 0xF0);
   792     077F  0875               	movf	lcd_send_byte@data,w
   793     0780  00F4               	movwf	??_lcd_send_byte
   794     0781  3003               	movlw	3
   795     0782                     u15:
   796     0782  1003               	clrc
   797     0783  0DF4               	rlf	??_lcd_send_byte,f
   798     0784  3EFF               	addlw	-1
   799     0785  1D03               	skipz
   800     0786  2F82               	goto	u15
   801     0787  1003               	clrc
   802     0788  0D74               	rlf	??_lcd_send_byte,w
   803     0789  39F0               	andlw	240
   804     078A  120A  118A  2753  120A  118A  	fcall	_lcd_send_nibble
   805     078F                     l21:
   806     078F  0008               	return
   807     0790                     __end_of_lcd_send_byte:
   808                           
   809                           	psect	text7
   810     0753                     __ptext7:	
   811 ;; *************** function _lcd_send_nibble *****************
   812 ;; Defined at:
   813 ;;		line 38 in file "lcd_interface.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  nibble          1    wreg     unsigned char 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  nibble          1    3[COMMON] unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0, pclath, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   827 ;;      Params:         0       0       0       0       0
   828 ;;      Locals:         1       0       0       0       0
   829 ;;      Temps:          1       0       0       0       0
   830 ;;      Totals:         2       0       0       0       0
   831 ;;Total ram usage:        2 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; Hardware stack levels required when called: 1
   834 ;; This function calls:
   835 ;;		_lcd_enable_pulse
   836 ;; This function is called by:
   837 ;;		_lcd_send_byte
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841     0753                     _lcd_send_nibble:	
   842                           ;psect for function _lcd_send_nibble
   843                           
   844                           
   845                           ;incstack = 0
   846                           ; Regs used in _lcd_send_nibble: [wreg+status,2+status,0+pclath+cstack]
   847                           ;lcd_send_nibble@nibble stored from wreg
   848     0753  00F3               	movwf	lcd_send_nibble@nibble
   849     0754                     l599:
   850                           
   851                           ;lcd_interface.c: 39:     PORTC = (PORTC & 0x0F) | (nibble & 0xF0);
   852     0754  30F0               	movlw	240
   853     0755  0573               	andwf	lcd_send_nibble@nibble,w
   854     0756  00F2               	movwf	??_lcd_send_nibble
   855     0757  1283               	bcf	3,5	;RP0=0, select bank0
   856     0758  1303               	bcf	3,6	;RP1=0, select bank0
   857     0759  0807               	movf	7,w	;volatile
   858     075A  390F               	andlw	15
   859     075B  0472               	iorwf	??_lcd_send_nibble,w
   860     075C  0087               	movwf	7	;volatile
   861     075D                     l601:
   862                           
   863                           ;lcd_interface.c: 40:     lcd_enable_pulse();
   864     075D  120A  118A  2743  120A  118A  	fcall	_lcd_enable_pulse
   865     0762                     l18:
   866     0762  0008               	return
   867     0763                     __end_of_lcd_send_nibble:
   868                           
   869                           	psect	text8
   870     0743                     __ptext8:	
   871 ;; *************** function _lcd_enable_pulse *****************
   872 ;; Defined at:
   873 ;;		line 32 in file "lcd_interface.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   887 ;;      Params:         0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0
   889 ;;      Temps:          2       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_lcd_send_nibble
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900     0743                     _lcd_enable_pulse:	
   901                           ;psect for function _lcd_enable_pulse
   902                           
   903     0743                     l593:	
   904                           ;incstack = 0
   905                           ; Regs used in _lcd_enable_pulse: [wreg]
   906                           
   907                           
   908                           ;lcd_interface.c: 33:     RC2 = 1;
   909     0743  1283               	bcf	3,5	;RP0=0, select bank0
   910     0744  1303               	bcf	3,6	;RP1=0, select bank0
   911     0745  1507               	bsf	7,2	;volatile
   912     0746                     l595:
   913                           
   914                           ;lcd_interface.c: 34:     _delay((unsigned long)((10)*(4000000/4000.0)));
   915     0746  300D               	movlw	13
   916     0747  00F1               	movwf	??_lcd_enable_pulse+1
   917     0748  30FB               	movlw	251
   918     0749  00F0               	movwf	??_lcd_enable_pulse
   919     074A                     u87:
   920     074A  0BF0               	decfsz	??_lcd_enable_pulse,f
   921     074B  2F4A               	goto	u87
   922     074C  0BF1               	decfsz	??_lcd_enable_pulse+1,f
   923     074D  2F4A               	goto	u87
   924     074E  2F4F               	nop2
   925     074F                     l597:
   926                           
   927                           ;lcd_interface.c: 35:     RC2 = 0;
   928     074F  1283               	bcf	3,5	;RP0=0, select bank0
   929     0750  1303               	bcf	3,6	;RP1=0, select bank0
   930     0751  1107               	bcf	7,2	;volatile
   931     0752                     l15:
   932     0752  0008               	return
   933     0753                     __end_of_lcd_enable_pulse:
   934     007E                     btemp	set	126	;btemp
   935     007E                     wtemp0	set	126
   936                           
   937                           	psect	config
   938                           
   939                           ;Config register CONFIG @ 0x2007
   940                           ;	Oscillator Selection bits
   941                           ;	FOSC = XT, XT oscillator
   942                           ;	Watchdog Timer Enable bit
   943                           ;	WDTE = OFF, WDT disabled
   944                           ;	Power-up Timer Enable bit
   945                           ;	PWRTE = OFF, PWRT disabled
   946                           ;	Brown-out Reset Enable bit
   947                           ;	BOREN = OFF, BOR disabled
   948                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   949                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   950                           ;	Data EEPROM Memory Code Protection bit
   951                           ;	CPD = OFF, Data EEPROM code protection off
   952                           ;	Flash Program Memory Write Enable bits
   953                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   954                           ;	In-Circuit Debugger Mode bit
   955                           ;	DEBUG = 0x1, unprogrammed default
   956                           ;	Flash Program Memory Code Protection bit
   957                           ;	CP = OFF, Code protection off
   958     2007                     	org	8199
   959     2007  3F39               	dw	16185

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_write_string@str	PTR unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_lcd_set_cursor
    _lcd_write_string->_lcd_data
    _lcd_data->_lcd_send_byte
    _lcd_set_cursor->_lcd_command
    _lcd_init->_lcd_command
    _lcd_command->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_lcd_enable_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     424
                           _lcd_init
                     _lcd_set_cursor
                   _lcd_write_string
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     2     2      0     138
                                              7 COMMON     2     2      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0      60
                                              6 COMMON     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       3     2      1     226
                                              7 COMMON     3     2      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      60
                                              7 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          1     1      0      60
                                              6 COMMON     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     2      0      45
                                              4 COMMON     2     2      0
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      15
                                              2 COMMON     2     2      0
                   _lcd_enable_pulse
 ---------------------------------------------------------------------------------
 (5) _lcd_enable_pulse                                     2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _lcd_command
       _lcd_send_byte
         _lcd_send_nibble
           _lcd_enable_pulse
   _lcd_set_cursor
     _lcd_command
   _lcd_write_string
     _lcd_data
       _lcd_send_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Jun 18 17:32:29 2024

                       pc 0002              lcd_data@data 0076                        l21 078F  
                      l30 07FB                        l15 0752                        l24 0736  
                      l41 07CA                        l18 0762                        l35 0776  
                      l27 0742                        l46 07A8                        l47 07A8  
                      u15 0782                        u40 0769                        u41 0768  
                      u50 07CA                        u51 07C9            ?_lcd_send_byte 0070  
                      u67 07CF                        u77 07F6                        u87 074A  
                      fsr 0004                       l601 075D                       l603 0778  
                     l611 073C                       l605 072C                       l621 07E6  
                     l613 07CB                       l607 0730                       l623 07EC  
                     l615 07D4                       l625 07F2                       l617 07DA  
                     l609 0738                       l619 07E0                       l651 0764  
                     l653 0769                       l661 07AE                       l655 076C  
                     l663 07BA                       l671 079B                       l593 0743  
                     l657 076F                       l665 07BE                       l673 07A2  
                     l595 0746                       l659 07AD                       l667 0790  
                     l597 074F                       l669 0796                       l599 0754  
                     _RC0 0038                       _RC1 0039                       _RC2 003A  
                     fsr0 0004           ?_lcd_set_cursor 0077                      STR_1 0009  
        ?_lcd_send_nibble 0070                      _main 0790                      btemp 007E  
                    start 0000                     ?_main 0070                     _PORTC 0007  
                   _TRISC 0087                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 07FC              __end_of_main 07AC  
         ??_lcd_send_byte 0074                    ??_main 007A          _lcd_enable_pulse 0743  
        __end_of_lcd_data 0743          __end_of_lcd_init 07FC  __end_of_lcd_write_string 07CB  
 __end_of__initialization 07FC            __pcstackCOMMON 0070          ??_lcd_set_cursor 0078  
              __pmaintext 0790                 ?_lcd_data 0070                 ?_lcd_init 0070  
              __stringtab 0003  __end_of_lcd_enable_pulse 0753                   __ptext1 07AC  
                 __ptext2 0737                   __ptext3 0763                   __ptext4 07CB  
                 __ptext5 072B                   __ptext6 0777                   __ptext7 0753  
                 __ptext8 0743                ??_lcd_data 0076                ??_lcd_init 0077  
    end_of_initialization 07FC     __end_of_lcd_send_byte 0790         ?_lcd_write_string 0070  
      ??_lcd_write_string 0077             ??_lcd_command 0076         ??_lcd_send_nibble 0072  
     start_initialization 07FC        lcd_command@command 0076     lcd_set_cursor@address 0079  
     __end_of_lcd_command 0737                 ___latbits 0002         ?_lcd_enable_pulse 0070  
       lcd_send_byte@data 0075        ??_lcd_enable_pulse 0070                 __pstrings 0003  
             _lcd_command 072B               __stringbase 0008           _lcd_send_nibble 0753  
      __end_of__stringtab 0009                  _lcd_data 0737                  _lcd_init 07CB  
          _lcd_set_cursor 0763         lcd_set_cursor@col 0077   __end_of_lcd_send_nibble 0763  
       lcd_set_cursor@row 0078                 stringcode 0003             _lcd_send_byte 0777  
                stringdir 0003                  stringtab 0003    __end_of_lcd_set_cursor 0777  
        _lcd_write_string 07AC              ?_lcd_command 0070       lcd_write_string@str 0078  
   lcd_send_nibble@nibble 0073  
